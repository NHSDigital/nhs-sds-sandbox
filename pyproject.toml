[tool.poetry]
name = "nhs-sds-sandbox"
version = "0.0.0"
description = ""
authors = ["spinecore"]
license = "Proprietary"
readme = "README.md"

[tool.poetry.dependencies]
# core dependencies
python = ">=3.11,<4.0"


[tool.poetry.group.dev.dependencies]
# ci / testing dependencies
black = "^24.1.1"
ruff = "^0.1.6"
mypy = "^1.4.0"
pytest = "^7.3.1"
pytest-asyncio = "^0.21.1"
bonsai = "^1.5.1"



[tool.pytest.ini_options]
asyncio_mode = "auto"
python_classes = "NoTestClassesPlease"
python_files = "tests/*.py"
norecursedirs = ".git .venv .eggs"

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
#extend-exclude = '''
#/(
#  # The following are specific to Black, you probably don't want those.
#  | blib2to3
#  | tests/data
#  | profiling
#)/
#'''


[tool.ruff]
select = [
    # See https://beta.ruff.rs/docs/rules/ for a full list
    "RUF100",
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q", # flake8-quotes
    "YTT", # flake8-2020
    "RSE", # flake8-raise
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "EXE", # flake8-executable
    "A", # flake8-builtins
    "UP",  # pyupgrade
    "PT", # flake8-pytest-style
    "PERF", # Perflint #
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
src = ["."]
ignore = [
    "B008",
    "PT004"
]
exclude = [
    ".git",
    ".venv",
]
unfixable = ["SIM112"]
line-length = 120
target-version = "py311"


[tool.ruff.isort]
known-third-party = []


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
check_untyped_defs = true


[tool.poetry-dynamic-versioning]
enable = true
metadata = false
vcs = "git"
style = "pep440"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=timestamp) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [
    { path = "src" }
]

[build-system]
requires = ["poetry>=1.2", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"